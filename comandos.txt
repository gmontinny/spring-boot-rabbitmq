Primeiramente, através do terminal, criamos uma rede no Docker para que os containers consigam se comunicar e se “enxergar”.

docker network create alura

Depois, subimos três instâncias do RabbitMQ através de containers Docker, mapeando-as em diferentes portas locais. Passamos uma variável de ambiente para setar todos com o mesmo Erlang Cookie necessário para a comunicação e espelhamento das mensagens. Utilizamos os seguintes comandos:

docker run -d --rm --net alura --hostname rabbit1 --name rabbit1 -p 8085:15672 -e RABBITMQ_ERLANG_COOKIE=alura_secret rabbitmq:3.10-management

docker run -d --rm --net alura --hostname rabbit2 --name rabbit2 -p 8086:15672 -e RABBITMQ_ERLANG_COOKIE=alura_secret rabbitmq:3.10-management

docker run -d --rm --net alura --hostname rabbit3 --name rabbit3 -p 8087:15672 -e RABBITMQ_ERLANG_COOKIE=alura_secret rabbitmq:3.10-management

docker exec -it rabbit2 rabbitmqctl stop_app
docker exec -it rabbit2 rabbitmqctl reset
docker exec -it rabbit2 rabbitmqctl join_cluster rabbit@rabbit1
docker exec -it rabbit2 rabbitmqctl start_app

